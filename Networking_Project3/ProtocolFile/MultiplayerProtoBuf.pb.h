// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MultiplayerProtoBuf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MultiplayerProtoBuf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MultiplayerProtoBuf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MultiplayerProtoBuf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MultiplayerProtoBuf_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MultiplayerProtoBuf_2eproto;
namespace Multiplayer {
class Bullet;
struct BulletDefaultTypeInternal;
extern BulletDefaultTypeInternal _Bullet_default_instance_;
class CommandAndData;
struct CommandAndDataDefaultTypeInternal;
extern CommandAndDataDefaultTypeInternal _CommandAndData_default_instance_;
class Empty;
struct EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class GameScene;
struct GameSceneDefaultTypeInternal;
extern GameSceneDefaultTypeInternal _GameScene_default_instance_;
class LengthPrefix;
struct LengthPrefixDefaultTypeInternal;
extern LengthPrefixDefaultTypeInternal _LengthPrefix_default_instance_;
class Player;
struct PlayerDefaultTypeInternal;
extern PlayerDefaultTypeInternal _Player_default_instance_;
class UserInput;
struct UserInputDefaultTypeInternal;
extern UserInputDefaultTypeInternal _UserInput_default_instance_;
class vector3;
struct vector3DefaultTypeInternal;
extern vector3DefaultTypeInternal _vector3_default_instance_;
}  // namespace Multiplayer
PROTOBUF_NAMESPACE_OPEN
template<> ::Multiplayer::Bullet* Arena::CreateMaybeMessage<::Multiplayer::Bullet>(Arena*);
template<> ::Multiplayer::CommandAndData* Arena::CreateMaybeMessage<::Multiplayer::CommandAndData>(Arena*);
template<> ::Multiplayer::Empty* Arena::CreateMaybeMessage<::Multiplayer::Empty>(Arena*);
template<> ::Multiplayer::GameScene* Arena::CreateMaybeMessage<::Multiplayer::GameScene>(Arena*);
template<> ::Multiplayer::LengthPrefix* Arena::CreateMaybeMessage<::Multiplayer::LengthPrefix>(Arena*);
template<> ::Multiplayer::Player* Arena::CreateMaybeMessage<::Multiplayer::Player>(Arena*);
template<> ::Multiplayer::UserInput* Arena::CreateMaybeMessage<::Multiplayer::UserInput>(Arena*);
template<> ::Multiplayer::vector3* Arena::CreateMaybeMessage<::Multiplayer::vector3>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Multiplayer {

// ===================================================================

class vector3 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Multiplayer.vector3) */ {
 public:
  inline vector3() : vector3(nullptr) {}
  ~vector3() override;
  explicit constexpr vector3(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  vector3(const vector3& from);
  vector3(vector3&& from) noexcept
    : vector3() {
    *this = ::std::move(from);
  }

  inline vector3& operator=(const vector3& from) {
    CopyFrom(from);
    return *this;
  }
  inline vector3& operator=(vector3&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const vector3& default_instance() {
    return *internal_default_instance();
  }
  static inline const vector3* internal_default_instance() {
    return reinterpret_cast<const vector3*>(
               &_vector3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(vector3& a, vector3& b) {
    a.Swap(&b);
  }
  inline void Swap(vector3* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(vector3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline vector3* New() const final {
    return new vector3();
  }

  vector3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<vector3>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const vector3& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const vector3& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(vector3* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Multiplayer.vector3";
  }
  protected:
  explicit vector3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // required float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // required float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // required float z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:Multiplayer.vector3)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  float z_;
  friend struct ::TableStruct_MultiplayerProtoBuf_2eproto;
};
// -------------------------------------------------------------------

class LengthPrefix final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Multiplayer.LengthPrefix) */ {
 public:
  inline LengthPrefix() : LengthPrefix(nullptr) {}
  ~LengthPrefix() override;
  explicit constexpr LengthPrefix(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LengthPrefix(const LengthPrefix& from);
  LengthPrefix(LengthPrefix&& from) noexcept
    : LengthPrefix() {
    *this = ::std::move(from);
  }

  inline LengthPrefix& operator=(const LengthPrefix& from) {
    CopyFrom(from);
    return *this;
  }
  inline LengthPrefix& operator=(LengthPrefix&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LengthPrefix& default_instance() {
    return *internal_default_instance();
  }
  static inline const LengthPrefix* internal_default_instance() {
    return reinterpret_cast<const LengthPrefix*>(
               &_LengthPrefix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LengthPrefix& a, LengthPrefix& b) {
    a.Swap(&b);
  }
  inline void Swap(LengthPrefix* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LengthPrefix* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LengthPrefix* New() const final {
    return new LengthPrefix();
  }

  LengthPrefix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LengthPrefix>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LengthPrefix& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LengthPrefix& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LengthPrefix* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Multiplayer.LengthPrefix";
  }
  protected:
  explicit LengthPrefix(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageLengthFieldNumber = 1,
  };
  // required fixed32 messageLength = 1;
  bool has_messagelength() const;
  private:
  bool _internal_has_messagelength() const;
  public:
  void clear_messagelength();
  ::PROTOBUF_NAMESPACE_ID::uint32 messagelength() const;
  void set_messagelength(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_messagelength() const;
  void _internal_set_messagelength(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Multiplayer.LengthPrefix)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 messagelength_;
  friend struct ::TableStruct_MultiplayerProtoBuf_2eproto;
};
// -------------------------------------------------------------------

class CommandAndData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Multiplayer.CommandAndData) */ {
 public:
  inline CommandAndData() : CommandAndData(nullptr) {}
  ~CommandAndData() override;
  explicit constexpr CommandAndData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandAndData(const CommandAndData& from);
  CommandAndData(CommandAndData&& from) noexcept
    : CommandAndData() {
    *this = ::std::move(from);
  }

  inline CommandAndData& operator=(const CommandAndData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandAndData& operator=(CommandAndData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandAndData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandAndData* internal_default_instance() {
    return reinterpret_cast<const CommandAndData*>(
               &_CommandAndData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CommandAndData& a, CommandAndData& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandAndData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandAndData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandAndData* New() const final {
    return new CommandAndData();
  }

  CommandAndData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandAndData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandAndData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandAndData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandAndData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Multiplayer.CommandAndData";
  }
  protected:
  explicit CommandAndData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kIdFieldNumber = 1,
    kCommandFieldNumber = 2,
  };
  // required bytes data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // required int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 command = 2;
  bool has_command() const;
  private:
  bool _internal_has_command() const;
  public:
  void clear_command();
  ::PROTOBUF_NAMESPACE_ID::int32 command() const;
  void set_command(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_command() const;
  void _internal_set_command(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Multiplayer.CommandAndData)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 command_;
  friend struct ::TableStruct_MultiplayerProtoBuf_2eproto;
};
// -------------------------------------------------------------------

class Empty final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Multiplayer.Empty) */ {
 public:
  inline Empty() : Empty(nullptr) {}
  ~Empty() override;
  explicit constexpr Empty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Empty(const Empty& from);
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Empty& default_instance() {
    return *internal_default_instance();
  }
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }
  inline void Swap(Empty* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Empty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Empty* New() const final {
    return new Empty();
  }

  Empty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Empty& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Empty& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Empty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Multiplayer.Empty";
  }
  protected:
  explicit Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmptyFieldNumber = 1,
  };
  // required string empty = 1;
  bool has_empty() const;
  private:
  bool _internal_has_empty() const;
  public:
  void clear_empty();
  const std::string& empty() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_empty(ArgT0&& arg0, ArgT... args);
  std::string* mutable_empty();
  PROTOBUF_MUST_USE_RESULT std::string* release_empty();
  void set_allocated_empty(std::string* empty);
  private:
  const std::string& _internal_empty() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_empty(const std::string& value);
  std::string* _internal_mutable_empty();
  public:

  // @@protoc_insertion_point(class_scope:Multiplayer.Empty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr empty_;
  friend struct ::TableStruct_MultiplayerProtoBuf_2eproto;
};
// -------------------------------------------------------------------

class UserInput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Multiplayer.UserInput) */ {
 public:
  inline UserInput() : UserInput(nullptr) {}
  ~UserInput() override;
  explicit constexpr UserInput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserInput(const UserInput& from);
  UserInput(UserInput&& from) noexcept
    : UserInput() {
    *this = ::std::move(from);
  }

  inline UserInput& operator=(const UserInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInput& operator=(UserInput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserInput& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserInput* internal_default_instance() {
    return reinterpret_cast<const UserInput*>(
               &_UserInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UserInput& a, UserInput& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInput* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserInput* New() const final {
    return new UserInput();
  }

  UserInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserInput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserInput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UserInput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Multiplayer.UserInput";
  }
  protected:
  explicit UserInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputFieldNumber = 2,
  };
  // required int32 input = 2;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  ::PROTOBUF_NAMESPACE_ID::int32 input() const;
  void set_input(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_input() const;
  void _internal_set_input(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Multiplayer.UserInput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 input_;
  friend struct ::TableStruct_MultiplayerProtoBuf_2eproto;
};
// -------------------------------------------------------------------

class Player final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Multiplayer.Player) */ {
 public:
  inline Player() : Player(nullptr) {}
  ~Player() override;
  explicit constexpr Player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Player(const Player& from);
  Player(Player&& from) noexcept
    : Player() {
    *this = ::std::move(from);
  }

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline Player& operator=(Player&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const Player* internal_default_instance() {
    return reinterpret_cast<const Player*>(
               &_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Player& a, Player& b) {
    a.Swap(&b);
  }
  inline void Swap(Player* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Player* New() const final {
    return new Player();
  }

  Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Player>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Player& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Player& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Player* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Multiplayer.Player";
  }
  protected:
  explicit Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kVelocityFieldNumber = 3,
    kRotationFieldNumber = 4,
    kStateFieldNumber = 1,
  };
  // optional .Multiplayer.vector3 position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::Multiplayer::vector3& position() const;
  PROTOBUF_MUST_USE_RESULT ::Multiplayer::vector3* release_position();
  ::Multiplayer::vector3* mutable_position();
  void set_allocated_position(::Multiplayer::vector3* position);
  private:
  const ::Multiplayer::vector3& _internal_position() const;
  ::Multiplayer::vector3* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::Multiplayer::vector3* position);
  ::Multiplayer::vector3* unsafe_arena_release_position();

  // optional .Multiplayer.vector3 velocity = 3;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::Multiplayer::vector3& velocity() const;
  PROTOBUF_MUST_USE_RESULT ::Multiplayer::vector3* release_velocity();
  ::Multiplayer::vector3* mutable_velocity();
  void set_allocated_velocity(::Multiplayer::vector3* velocity);
  private:
  const ::Multiplayer::vector3& _internal_velocity() const;
  ::Multiplayer::vector3* _internal_mutable_velocity();
  public:
  void unsafe_arena_set_allocated_velocity(
      ::Multiplayer::vector3* velocity);
  ::Multiplayer::vector3* unsafe_arena_release_velocity();

  // optional .Multiplayer.vector3 rotation = 4;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::Multiplayer::vector3& rotation() const;
  PROTOBUF_MUST_USE_RESULT ::Multiplayer::vector3* release_rotation();
  ::Multiplayer::vector3* mutable_rotation();
  void set_allocated_rotation(::Multiplayer::vector3* rotation);
  private:
  const ::Multiplayer::vector3& _internal_rotation() const;
  ::Multiplayer::vector3* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::Multiplayer::vector3* rotation);
  ::Multiplayer::vector3* unsafe_arena_release_rotation();

  // required int32 state = 1;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Multiplayer.Player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Multiplayer::vector3* position_;
  ::Multiplayer::vector3* velocity_;
  ::Multiplayer::vector3* rotation_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  friend struct ::TableStruct_MultiplayerProtoBuf_2eproto;
};
// -------------------------------------------------------------------

class Bullet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Multiplayer.Bullet) */ {
 public:
  inline Bullet() : Bullet(nullptr) {}
  ~Bullet() override;
  explicit constexpr Bullet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bullet(const Bullet& from);
  Bullet(Bullet&& from) noexcept
    : Bullet() {
    *this = ::std::move(from);
  }

  inline Bullet& operator=(const Bullet& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bullet& operator=(Bullet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Bullet& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bullet* internal_default_instance() {
    return reinterpret_cast<const Bullet*>(
               &_Bullet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Bullet& a, Bullet& b) {
    a.Swap(&b);
  }
  inline void Swap(Bullet* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bullet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Bullet* New() const final {
    return new Bullet();
  }

  Bullet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Bullet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Bullet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Bullet& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bullet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Multiplayer.Bullet";
  }
  protected:
  explicit Bullet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kVelocityFieldNumber = 3,
    kStateFieldNumber = 1,
  };
  // optional .Multiplayer.vector3 position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::Multiplayer::vector3& position() const;
  PROTOBUF_MUST_USE_RESULT ::Multiplayer::vector3* release_position();
  ::Multiplayer::vector3* mutable_position();
  void set_allocated_position(::Multiplayer::vector3* position);
  private:
  const ::Multiplayer::vector3& _internal_position() const;
  ::Multiplayer::vector3* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::Multiplayer::vector3* position);
  ::Multiplayer::vector3* unsafe_arena_release_position();

  // optional .Multiplayer.vector3 velocity = 3;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::Multiplayer::vector3& velocity() const;
  PROTOBUF_MUST_USE_RESULT ::Multiplayer::vector3* release_velocity();
  ::Multiplayer::vector3* mutable_velocity();
  void set_allocated_velocity(::Multiplayer::vector3* velocity);
  private:
  const ::Multiplayer::vector3& _internal_velocity() const;
  ::Multiplayer::vector3* _internal_mutable_velocity();
  public:
  void unsafe_arena_set_allocated_velocity(
      ::Multiplayer::vector3* velocity);
  ::Multiplayer::vector3* unsafe_arena_release_velocity();

  // required int32 state = 1;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Multiplayer.Bullet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Multiplayer::vector3* position_;
  ::Multiplayer::vector3* velocity_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  friend struct ::TableStruct_MultiplayerProtoBuf_2eproto;
};
// -------------------------------------------------------------------

class GameScene final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Multiplayer.GameScene) */ {
 public:
  inline GameScene() : GameScene(nullptr) {}
  ~GameScene() override;
  explicit constexpr GameScene(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameScene(const GameScene& from);
  GameScene(GameScene&& from) noexcept
    : GameScene() {
    *this = ::std::move(from);
  }

  inline GameScene& operator=(const GameScene& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameScene& operator=(GameScene&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameScene& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameScene* internal_default_instance() {
    return reinterpret_cast<const GameScene*>(
               &_GameScene_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GameScene& a, GameScene& b) {
    a.Swap(&b);
  }
  inline void Swap(GameScene* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameScene* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameScene* New() const final {
    return new GameScene();
  }

  GameScene* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameScene>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameScene& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GameScene& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameScene* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Multiplayer.GameScene";
  }
  protected:
  explicit GameScene(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 2,
    kBulletsFieldNumber = 3,
  };
  // repeated .Multiplayer.Player players = 2;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::Multiplayer::Player* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Multiplayer::Player >*
      mutable_players();
  private:
  const ::Multiplayer::Player& _internal_players(int index) const;
  ::Multiplayer::Player* _internal_add_players();
  public:
  const ::Multiplayer::Player& players(int index) const;
  ::Multiplayer::Player* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Multiplayer::Player >&
      players() const;

  // repeated .Multiplayer.Bullet bullets = 3;
  int bullets_size() const;
  private:
  int _internal_bullets_size() const;
  public:
  void clear_bullets();
  ::Multiplayer::Bullet* mutable_bullets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Multiplayer::Bullet >*
      mutable_bullets();
  private:
  const ::Multiplayer::Bullet& _internal_bullets(int index) const;
  ::Multiplayer::Bullet* _internal_add_bullets();
  public:
  const ::Multiplayer::Bullet& bullets(int index) const;
  ::Multiplayer::Bullet* add_bullets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Multiplayer::Bullet >&
      bullets() const;

  // @@protoc_insertion_point(class_scope:Multiplayer.GameScene)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Multiplayer::Player > players_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Multiplayer::Bullet > bullets_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MultiplayerProtoBuf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// vector3

// required float x = 1;
inline bool vector3::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool vector3::has_x() const {
  return _internal_has_x();
}
inline void vector3::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float vector3::_internal_x() const {
  return x_;
}
inline float vector3::x() const {
  // @@protoc_insertion_point(field_get:Multiplayer.vector3.x)
  return _internal_x();
}
inline void vector3::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void vector3::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Multiplayer.vector3.x)
}

// required float y = 2;
inline bool vector3::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool vector3::has_y() const {
  return _internal_has_y();
}
inline void vector3::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float vector3::_internal_y() const {
  return y_;
}
inline float vector3::y() const {
  // @@protoc_insertion_point(field_get:Multiplayer.vector3.y)
  return _internal_y();
}
inline void vector3::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void vector3::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Multiplayer.vector3.y)
}

// required float z = 3;
inline bool vector3::_internal_has_z() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool vector3::has_z() const {
  return _internal_has_z();
}
inline void vector3::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float vector3::_internal_z() const {
  return z_;
}
inline float vector3::z() const {
  // @@protoc_insertion_point(field_get:Multiplayer.vector3.z)
  return _internal_z();
}
inline void vector3::_internal_set_z(float value) {
  _has_bits_[0] |= 0x00000004u;
  z_ = value;
}
inline void vector3::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Multiplayer.vector3.z)
}

// -------------------------------------------------------------------

// LengthPrefix

// required fixed32 messageLength = 1;
inline bool LengthPrefix::_internal_has_messagelength() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LengthPrefix::has_messagelength() const {
  return _internal_has_messagelength();
}
inline void LengthPrefix::clear_messagelength() {
  messagelength_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LengthPrefix::_internal_messagelength() const {
  return messagelength_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LengthPrefix::messagelength() const {
  // @@protoc_insertion_point(field_get:Multiplayer.LengthPrefix.messageLength)
  return _internal_messagelength();
}
inline void LengthPrefix::_internal_set_messagelength(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  messagelength_ = value;
}
inline void LengthPrefix::set_messagelength(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_messagelength(value);
  // @@protoc_insertion_point(field_set:Multiplayer.LengthPrefix.messageLength)
}

// -------------------------------------------------------------------

// CommandAndData

// required int32 id = 1;
inline bool CommandAndData::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandAndData::has_id() const {
  return _internal_has_id();
}
inline void CommandAndData::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommandAndData::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommandAndData::id() const {
  // @@protoc_insertion_point(field_get:Multiplayer.CommandAndData.id)
  return _internal_id();
}
inline void CommandAndData::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void CommandAndData::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Multiplayer.CommandAndData.id)
}

// required int32 command = 2;
inline bool CommandAndData::_internal_has_command() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandAndData::has_command() const {
  return _internal_has_command();
}
inline void CommandAndData::clear_command() {
  command_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommandAndData::_internal_command() const {
  return command_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommandAndData::command() const {
  // @@protoc_insertion_point(field_get:Multiplayer.CommandAndData.command)
  return _internal_command();
}
inline void CommandAndData::_internal_set_command(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  command_ = value;
}
inline void CommandAndData::set_command(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:Multiplayer.CommandAndData.command)
}

// required bytes data = 3;
inline bool CommandAndData::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommandAndData::has_data() const {
  return _internal_has_data();
}
inline void CommandAndData::clear_data() {
  data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CommandAndData::data() const {
  // @@protoc_insertion_point(field_get:Multiplayer.CommandAndData.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandAndData::set_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Multiplayer.CommandAndData.data)
}
inline std::string* CommandAndData::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:Multiplayer.CommandAndData.data)
  return _s;
}
inline const std::string& CommandAndData::_internal_data() const {
  return data_.Get();
}
inline void CommandAndData::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CommandAndData::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CommandAndData::release_data() {
  // @@protoc_insertion_point(field_release:Multiplayer.CommandAndData.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CommandAndData::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Multiplayer.CommandAndData.data)
}

// -------------------------------------------------------------------

// Empty

// required string empty = 1;
inline bool Empty::_internal_has_empty() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Empty::has_empty() const {
  return _internal_has_empty();
}
inline void Empty::clear_empty() {
  empty_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Empty::empty() const {
  // @@protoc_insertion_point(field_get:Multiplayer.Empty.empty)
  return _internal_empty();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Empty::set_empty(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 empty_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Multiplayer.Empty.empty)
}
inline std::string* Empty::mutable_empty() {
  std::string* _s = _internal_mutable_empty();
  // @@protoc_insertion_point(field_mutable:Multiplayer.Empty.empty)
  return _s;
}
inline const std::string& Empty::_internal_empty() const {
  return empty_.Get();
}
inline void Empty::_internal_set_empty(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  empty_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Empty::_internal_mutable_empty() {
  _has_bits_[0] |= 0x00000001u;
  return empty_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Empty::release_empty() {
  // @@protoc_insertion_point(field_release:Multiplayer.Empty.empty)
  if (!_internal_has_empty()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return empty_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Empty::set_allocated_empty(std::string* empty) {
  if (empty != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  empty_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), empty,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Multiplayer.Empty.empty)
}

// -------------------------------------------------------------------

// UserInput

// required int32 input = 2;
inline bool UserInput::_internal_has_input() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UserInput::has_input() const {
  return _internal_has_input();
}
inline void UserInput::clear_input() {
  input_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserInput::_internal_input() const {
  return input_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserInput::input() const {
  // @@protoc_insertion_point(field_get:Multiplayer.UserInput.input)
  return _internal_input();
}
inline void UserInput::_internal_set_input(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  input_ = value;
}
inline void UserInput::set_input(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_input(value);
  // @@protoc_insertion_point(field_set:Multiplayer.UserInput.input)
}

// -------------------------------------------------------------------

// Player

// required int32 state = 1;
inline bool Player::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Player::has_state() const {
  return _internal_has_state();
}
inline void Player::clear_state() {
  state_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::state() const {
  // @@protoc_insertion_point(field_get:Multiplayer.Player.state)
  return _internal_state();
}
inline void Player::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  state_ = value;
}
inline void Player::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:Multiplayer.Player.state)
}

// optional .Multiplayer.vector3 position = 2;
inline bool Player::_internal_has_position() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || position_ != nullptr);
  return value;
}
inline bool Player::has_position() const {
  return _internal_has_position();
}
inline void Player::clear_position() {
  if (position_ != nullptr) position_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Multiplayer::vector3& Player::_internal_position() const {
  const ::Multiplayer::vector3* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::Multiplayer::vector3&>(
      ::Multiplayer::_vector3_default_instance_);
}
inline const ::Multiplayer::vector3& Player::position() const {
  // @@protoc_insertion_point(field_get:Multiplayer.Player.position)
  return _internal_position();
}
inline void Player::unsafe_arena_set_allocated_position(
    ::Multiplayer::vector3* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Multiplayer.Player.position)
}
inline ::Multiplayer::vector3* Player::release_position() {
  _has_bits_[0] &= ~0x00000001u;
  ::Multiplayer::vector3* temp = position_;
  position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Multiplayer::vector3* Player::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:Multiplayer.Player.position)
  _has_bits_[0] &= ~0x00000001u;
  ::Multiplayer::vector3* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::Multiplayer::vector3* Player::_internal_mutable_position() {
  _has_bits_[0] |= 0x00000001u;
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::Multiplayer::vector3>(GetArenaForAllocation());
    position_ = p;
  }
  return position_;
}
inline ::Multiplayer::vector3* Player::mutable_position() {
  ::Multiplayer::vector3* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:Multiplayer.Player.position)
  return _msg;
}
inline void Player::set_allocated_position(::Multiplayer::vector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Multiplayer::vector3>::GetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:Multiplayer.Player.position)
}

// optional .Multiplayer.vector3 velocity = 3;
inline bool Player::_internal_has_velocity() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || velocity_ != nullptr);
  return value;
}
inline bool Player::has_velocity() const {
  return _internal_has_velocity();
}
inline void Player::clear_velocity() {
  if (velocity_ != nullptr) velocity_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::Multiplayer::vector3& Player::_internal_velocity() const {
  const ::Multiplayer::vector3* p = velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::Multiplayer::vector3&>(
      ::Multiplayer::_vector3_default_instance_);
}
inline const ::Multiplayer::vector3& Player::velocity() const {
  // @@protoc_insertion_point(field_get:Multiplayer.Player.velocity)
  return _internal_velocity();
}
inline void Player::unsafe_arena_set_allocated_velocity(
    ::Multiplayer::vector3* velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_);
  }
  velocity_ = velocity;
  if (velocity) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Multiplayer.Player.velocity)
}
inline ::Multiplayer::vector3* Player::release_velocity() {
  _has_bits_[0] &= ~0x00000002u;
  ::Multiplayer::vector3* temp = velocity_;
  velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Multiplayer::vector3* Player::unsafe_arena_release_velocity() {
  // @@protoc_insertion_point(field_release:Multiplayer.Player.velocity)
  _has_bits_[0] &= ~0x00000002u;
  ::Multiplayer::vector3* temp = velocity_;
  velocity_ = nullptr;
  return temp;
}
inline ::Multiplayer::vector3* Player::_internal_mutable_velocity() {
  _has_bits_[0] |= 0x00000002u;
  if (velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::Multiplayer::vector3>(GetArenaForAllocation());
    velocity_ = p;
  }
  return velocity_;
}
inline ::Multiplayer::vector3* Player::mutable_velocity() {
  ::Multiplayer::vector3* _msg = _internal_mutable_velocity();
  // @@protoc_insertion_point(field_mutable:Multiplayer.Player.velocity)
  return _msg;
}
inline void Player::set_allocated_velocity(::Multiplayer::vector3* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete velocity_;
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Multiplayer::vector3>::GetOwningArena(velocity);
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:Multiplayer.Player.velocity)
}

// optional .Multiplayer.vector3 rotation = 4;
inline bool Player::_internal_has_rotation() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || rotation_ != nullptr);
  return value;
}
inline bool Player::has_rotation() const {
  return _internal_has_rotation();
}
inline void Player::clear_rotation() {
  if (rotation_ != nullptr) rotation_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::Multiplayer::vector3& Player::_internal_rotation() const {
  const ::Multiplayer::vector3* p = rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::Multiplayer::vector3&>(
      ::Multiplayer::_vector3_default_instance_);
}
inline const ::Multiplayer::vector3& Player::rotation() const {
  // @@protoc_insertion_point(field_get:Multiplayer.Player.rotation)
  return _internal_rotation();
}
inline void Player::unsafe_arena_set_allocated_rotation(
    ::Multiplayer::vector3* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation_);
  }
  rotation_ = rotation;
  if (rotation) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Multiplayer.Player.rotation)
}
inline ::Multiplayer::vector3* Player::release_rotation() {
  _has_bits_[0] &= ~0x00000004u;
  ::Multiplayer::vector3* temp = rotation_;
  rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Multiplayer::vector3* Player::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:Multiplayer.Player.rotation)
  _has_bits_[0] &= ~0x00000004u;
  ::Multiplayer::vector3* temp = rotation_;
  rotation_ = nullptr;
  return temp;
}
inline ::Multiplayer::vector3* Player::_internal_mutable_rotation() {
  _has_bits_[0] |= 0x00000004u;
  if (rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Multiplayer::vector3>(GetArenaForAllocation());
    rotation_ = p;
  }
  return rotation_;
}
inline ::Multiplayer::vector3* Player::mutable_rotation() {
  ::Multiplayer::vector3* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:Multiplayer.Player.rotation)
  return _msg;
}
inline void Player::set_allocated_rotation(::Multiplayer::vector3* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete rotation_;
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Multiplayer::vector3>::GetOwningArena(rotation);
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:Multiplayer.Player.rotation)
}

// -------------------------------------------------------------------

// Bullet

// required int32 state = 1;
inline bool Bullet::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Bullet::has_state() const {
  return _internal_has_state();
}
inline void Bullet::clear_state() {
  state_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Bullet::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Bullet::state() const {
  // @@protoc_insertion_point(field_get:Multiplayer.Bullet.state)
  return _internal_state();
}
inline void Bullet::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  state_ = value;
}
inline void Bullet::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:Multiplayer.Bullet.state)
}

// optional .Multiplayer.vector3 position = 2;
inline bool Bullet::_internal_has_position() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || position_ != nullptr);
  return value;
}
inline bool Bullet::has_position() const {
  return _internal_has_position();
}
inline void Bullet::clear_position() {
  if (position_ != nullptr) position_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Multiplayer::vector3& Bullet::_internal_position() const {
  const ::Multiplayer::vector3* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::Multiplayer::vector3&>(
      ::Multiplayer::_vector3_default_instance_);
}
inline const ::Multiplayer::vector3& Bullet::position() const {
  // @@protoc_insertion_point(field_get:Multiplayer.Bullet.position)
  return _internal_position();
}
inline void Bullet::unsafe_arena_set_allocated_position(
    ::Multiplayer::vector3* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Multiplayer.Bullet.position)
}
inline ::Multiplayer::vector3* Bullet::release_position() {
  _has_bits_[0] &= ~0x00000001u;
  ::Multiplayer::vector3* temp = position_;
  position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Multiplayer::vector3* Bullet::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:Multiplayer.Bullet.position)
  _has_bits_[0] &= ~0x00000001u;
  ::Multiplayer::vector3* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::Multiplayer::vector3* Bullet::_internal_mutable_position() {
  _has_bits_[0] |= 0x00000001u;
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::Multiplayer::vector3>(GetArenaForAllocation());
    position_ = p;
  }
  return position_;
}
inline ::Multiplayer::vector3* Bullet::mutable_position() {
  ::Multiplayer::vector3* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:Multiplayer.Bullet.position)
  return _msg;
}
inline void Bullet::set_allocated_position(::Multiplayer::vector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Multiplayer::vector3>::GetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:Multiplayer.Bullet.position)
}

// optional .Multiplayer.vector3 velocity = 3;
inline bool Bullet::_internal_has_velocity() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || velocity_ != nullptr);
  return value;
}
inline bool Bullet::has_velocity() const {
  return _internal_has_velocity();
}
inline void Bullet::clear_velocity() {
  if (velocity_ != nullptr) velocity_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::Multiplayer::vector3& Bullet::_internal_velocity() const {
  const ::Multiplayer::vector3* p = velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::Multiplayer::vector3&>(
      ::Multiplayer::_vector3_default_instance_);
}
inline const ::Multiplayer::vector3& Bullet::velocity() const {
  // @@protoc_insertion_point(field_get:Multiplayer.Bullet.velocity)
  return _internal_velocity();
}
inline void Bullet::unsafe_arena_set_allocated_velocity(
    ::Multiplayer::vector3* velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_);
  }
  velocity_ = velocity;
  if (velocity) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Multiplayer.Bullet.velocity)
}
inline ::Multiplayer::vector3* Bullet::release_velocity() {
  _has_bits_[0] &= ~0x00000002u;
  ::Multiplayer::vector3* temp = velocity_;
  velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Multiplayer::vector3* Bullet::unsafe_arena_release_velocity() {
  // @@protoc_insertion_point(field_release:Multiplayer.Bullet.velocity)
  _has_bits_[0] &= ~0x00000002u;
  ::Multiplayer::vector3* temp = velocity_;
  velocity_ = nullptr;
  return temp;
}
inline ::Multiplayer::vector3* Bullet::_internal_mutable_velocity() {
  _has_bits_[0] |= 0x00000002u;
  if (velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::Multiplayer::vector3>(GetArenaForAllocation());
    velocity_ = p;
  }
  return velocity_;
}
inline ::Multiplayer::vector3* Bullet::mutable_velocity() {
  ::Multiplayer::vector3* _msg = _internal_mutable_velocity();
  // @@protoc_insertion_point(field_mutable:Multiplayer.Bullet.velocity)
  return _msg;
}
inline void Bullet::set_allocated_velocity(::Multiplayer::vector3* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete velocity_;
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Multiplayer::vector3>::GetOwningArena(velocity);
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:Multiplayer.Bullet.velocity)
}

// -------------------------------------------------------------------

// GameScene

// repeated .Multiplayer.Player players = 2;
inline int GameScene::_internal_players_size() const {
  return players_.size();
}
inline int GameScene::players_size() const {
  return _internal_players_size();
}
inline void GameScene::clear_players() {
  players_.Clear();
}
inline ::Multiplayer::Player* GameScene::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:Multiplayer.GameScene.players)
  return players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Multiplayer::Player >*
GameScene::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:Multiplayer.GameScene.players)
  return &players_;
}
inline const ::Multiplayer::Player& GameScene::_internal_players(int index) const {
  return players_.Get(index);
}
inline const ::Multiplayer::Player& GameScene::players(int index) const {
  // @@protoc_insertion_point(field_get:Multiplayer.GameScene.players)
  return _internal_players(index);
}
inline ::Multiplayer::Player* GameScene::_internal_add_players() {
  return players_.Add();
}
inline ::Multiplayer::Player* GameScene::add_players() {
  ::Multiplayer::Player* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:Multiplayer.GameScene.players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Multiplayer::Player >&
GameScene::players() const {
  // @@protoc_insertion_point(field_list:Multiplayer.GameScene.players)
  return players_;
}

// repeated .Multiplayer.Bullet bullets = 3;
inline int GameScene::_internal_bullets_size() const {
  return bullets_.size();
}
inline int GameScene::bullets_size() const {
  return _internal_bullets_size();
}
inline void GameScene::clear_bullets() {
  bullets_.Clear();
}
inline ::Multiplayer::Bullet* GameScene::mutable_bullets(int index) {
  // @@protoc_insertion_point(field_mutable:Multiplayer.GameScene.bullets)
  return bullets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Multiplayer::Bullet >*
GameScene::mutable_bullets() {
  // @@protoc_insertion_point(field_mutable_list:Multiplayer.GameScene.bullets)
  return &bullets_;
}
inline const ::Multiplayer::Bullet& GameScene::_internal_bullets(int index) const {
  return bullets_.Get(index);
}
inline const ::Multiplayer::Bullet& GameScene::bullets(int index) const {
  // @@protoc_insertion_point(field_get:Multiplayer.GameScene.bullets)
  return _internal_bullets(index);
}
inline ::Multiplayer::Bullet* GameScene::_internal_add_bullets() {
  return bullets_.Add();
}
inline ::Multiplayer::Bullet* GameScene::add_bullets() {
  ::Multiplayer::Bullet* _add = _internal_add_bullets();
  // @@protoc_insertion_point(field_add:Multiplayer.GameScene.bullets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Multiplayer::Bullet >&
GameScene::bullets() const {
  // @@protoc_insertion_point(field_list:Multiplayer.GameScene.bullets)
  return bullets_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Multiplayer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MultiplayerProtoBuf_2eproto
